/*!
  \mainpage USBDM Flash Programmers

 \section introSection Introduction
   The following suite of programs are intended to be used with USBDM BDM interfaces.\n
   They provide the ability to program the internal Flash memory of the following Freescale microcontrollers:\n
   - RS08, HCS08, HCS12, Coldfire V1, Coldfire V2, Kinetis and a limited range of MC56F800x microcontrollers.\n
  
\section featuresSection Features
   - GUI usage is available for interactive use.
   - Command line usage is available for batch files.
   - Supports most chips - see list below.
   - Trimming of internal target clock to specified frequency (RS08, HCS08 & CFV1).
   - Programming of security options to leave the chip unsecured or secured after programming.
   - May be used to unsecure chips (by mass erase).
   - The code has been written in a modular fashion.  It should be straightforward to re-use the flash programming code
     to create other custom programming utilities.

\section sectionCommandLine Command Line

\subsection subsectionUsage Usage:
  
  <b>FlashProgrammer \<options\> \<BinaryFilename\> </b> \n
  If neither of the \b -program or \b -verify options are given then all options are \b ignored and a GUI interface is opened. \n
  - \b BinaryFilename \n The name of the S19 or ELF binary file to program.\n
  - \b Options (order is not significant). 
     -  \b -device=device_name        \n Target device e.g. MC9S08AW16A, MCF51CN128.
     -  \b -erase=erase_option        \n Selects erase method used (Mass, All, Selective, None).
     -  \b -execute                   \n Leave target power on & reset to normal mode at completion.
     -  \b -masserase                 \n Equivalent to erase=Mass.
     -  \b -noerase                   \n Equivalent to erase=None.    
     -  \b -nvloc=address             \n Trim non-volatile memory location address (hex).
     -  \b -power=dur,\b rec          \n Power off duration & recovery times (ms). 
     -  \b -program                   \n Program and verify flash contents.
     -  \b -reset=dur,\b rel,\b rec   \n Reset duration, release & recovery times (ms). 
     -  \b -secure                    \n Leave device secured after programming.
     -  \b -speed                     \n Communication speed on some targets (kHz).
     -  \b -trim=trim_frequency       \n Trim internal clock to frequency (in kHz) e.g. 32.7.
     -  \b -unsecure                  \n Leave device unsecured after programming.
     -  \b -vdd=vdd_value             \n Supply Vdd to target (3V3 or 5V).
     -  \b -verify                    \n Verify flash contents.\n

  The program sets the error code to 0 on success, non-zero otherwise.\n\n
  The program will use the first BDM located.  There is no option to select a BDM.
       
\subsection subsectionUsageExamples Examples of usage:
  -   Programming an image with clock trimming:
   \verbatim FlashProgrammer Image.s19 -vdd=3v3 -device=MC9S08AW16A -trim=243 -secure -program -execute \endverbatim
   This will program a \b MC9S08AW16A with the contents of the file \b Image.s19 and trim the internal clock
   to \b 243kHz.  Target Vdd will be 3.3 Volts (if this option applies to the BDM used).  The Flash image will 
   be modified so that the device will be \b secure after programming.  After programming the device will be left powered 
   and will be reset into normal mode i.e. will be left running the loaded program.\n\n
  -   Programming the clock trim in an already programmed chip:
   \verbatim FlashProgrammer -device=MC9S08QG8 -vdd=3v3 -trim=35.25 -erase=None -program \endverbatim
   This will trim the internal clock of \b MC9S08QG8 to \b 35.25kHz without erasing the present flash contents.
   Target Vdd will be 3.3 Volts (if this option applies to the BDM used).  
   It is necessary that the clock trim locations in flash are still unprogrammed (0xFF) when using
   the \b -trim option. The target cannot be secured after trimming.\n\n
  
\section sectionGUI Interactive (GUI)
   If the program is started without the \b -program or \b -verify options then an interactive dialogue is opened to 
   allow the user to configure the programmer.  The other options are \b ignored.\n
   
   The dialogue has three tabs.\n
   - The first tab is concerned primarily with USBDM interface selection, communication options and general features.
   The selected BDM will be opened when moving from this tab and closed when returning.
   - The second tab is specific to a particular target device.
   - The third tab contains other BDM options that are unlikely to need modification. 

   \b Note that the programmer uses a buffer to store the image to be programmed to the device.  Some of the 
   following options will persistently modify this buffer.  This means that, for example, if you choose the \b secure option, 
   program the device and then select the \b image option then further programming will also result in secured devices.
      
<hr>
<b>Tab 1 - USBDM</b>\n\n
   <table border="0">
   <tr>
   <td>
   <b>Select BDM - Allows selection between BDMs when multiple are connected</b>
      - <b> BDM Selection drop-down box - </b> This displays the serial numbers of the connected USBDM-BDMs.  It is 
         useful if each BDM has a unique serial number as that will allow the automatic re-selection of the same BDM
         on the next session.\n
         If the BDM does not support the required target then a suitable message replaces the serial number.  Communication
         problems will also cause an informative message. \n\n
      - <b> Detect button - </b> This may be used to scan for changes in the connected BDMs.\n\n
      - <b> BDM Description - </b> This is the BDM Description obtained from the BDM firmware.\n\n
      
   <b>Target Vdd Control - Enables supply of Target Vdd from the USBDM module</b>
      - <b> Off, 3.3V or 5V -</b> Controls voltage supply to target through BDM Vdd connection.\n\n
      - <b> Cycle target Vdd on reset -</b> This option will cause the BDM to cycle the target power as part of the reset sequence.\n\n
      - <b> Cycle target Vdd on connection problems -</b> This option will cause the BDM to cycle the target power when
         it is having trouble connecting to the target.  \n\n
      - <b> Leave target powered on exit -</b> The target Vdd supply will be left on when exiting the debugger.\n\n
         
   <b>Connection Control - This varies with target</b>
      - <b> Automatically re-connect -</b> The option causes the BDM to continuously update the interface speed
         to prevent loss of communication in case the target speed changes.  \n\n
      - <b> BDM Clock Select -</b> Some targets provide an alternative BDM clock selection which may be at 
         a lower speed that the default.  This can have advantages when connecting to high speed targets (mostly
         of use in the JB16 version).  There may be other requirements before the alternative clock will be used.\n\n  
         Note: it appears that HC12 use the Alt source by default so the Normal option may be of more interest.\n\n  
      - <b>Use RESET signal</b> - RS08, HCS08 and CFV1 targets do not require a reset signal for programming.   
         However it is sometimes useful to drive the reset signal to reset other circuitry connected to the target. 
         Selecting this option will cause the reset signal to be driven.\n\n
      - <b>Guess speed if no SYNC</b> - Early HCS12s do not support the SYNC feature which allows the BDM interface
         speed to be determined.  Selecting this option will cause the BDM to attempt to find the communication
         speed by trial and error.  This can take quite a while and may be unreliable.  Alternatively, set the 
         target speed in the debugger TBDML menu. \n\n
      - <b> Monitor PST signal -</b> Some CFVx targets provide a PSTALL or PST0-3 signals that may be used to determine 
         if the target is running or halted.  If not enabled or not supported by the BDM then a software method is used.
         The advantage of the PST signal is that it is more reliable in some cases.\n\n
      - <b> Connection Speed  -</b> This drop-down box allows the communication speed on CFVx, DSC and Kinetis devices
         to be changed.  There are severe limitations on the actual speed of the BDM for the JTAG based devices since 
         a software method is used to generate the waveform.

   <td> \image html "FlashProgrammer\USBDMTab(CFV1).png" 
        \image html "FlashProgrammer\USBDMTab(CFVx)Truncated.png"</td>
   </tr>
   </table>
         
<hr>
<b>Tab 2 - Target</b>\n\n

   <table border="0">
   <tr>
   <td>
 - <b>Flash Image Buffer </b>\n
   The programmer makes use of a Flash Image buffer to contain the information to be programmed to the target device.
   An image of the target flash contents is created in the buffer by loading hex files.  The buffer contents 
   may  also be altered by some of the later options (Security & Clock trim options modify particular locations 
   immediately before programming).
   -  Load Hex File\n
      Displays a dialogue to load a Freescale S-format hex file to be programmed to the device. 
      The image buffer is usually cleared before loading the file.\n
      The name of the last/currently loaded file is displayed.  
   - Incremental file load\n
      Selecting this option prevents the programmer from clearing the buffer before the load of a hex file. This
      option may be used to \e assemble a number of hex files into a single image to program to the device.  If 
      the contents of multiple hex file overlap then only the last loaded file's values will be programmed.  No
      warning of overlap is given.
   - Auto Reload\n
      Selecting this option causes the programmer to automatically reload the last loaded file if its modification 
      date has changed since it was last loaded.  It does so without a prompt.  If this option is not selected 
      then you will prompted to reload each time.
      
 - <b>Device Selection </b>\n
   - Device selection\n
      The drop down box allows the selection of the device type of the chip to be programmed.  Selecting a
      device type will cause most of the dialogue to be automatically completed.  Selecting \b Custom allows
      the individual selection of options.  This is only recommended for experienced users!
   - Detect SDID\n
      This causes the programmer to read the \b System \b Device \b Identification \b Register
      (\b SDID) from the target chip.  This may be used to partially identify the type of device
      that is being programmed. A single SDID may be used by more than one device in a related family,
      for example MC9S08QB4 and MC9S08QB8 have the same SDID. \n
      Because of this, it will usually be necessary to select a particular device with the 
      above Device Selection box.   
   - Filter by SDID\n
      Once the \b SDID has been read from the chip, this check box allows the list of devices to
      be restricted to those that have that SDID.
      
 - <b>Options for secured devices without SYNC (HCS12 devices only)</b>\n
   Most devices support the BDM SYNC command that is used to determine the BDM communication speed. The
   communication speed is then used to determine the target processor bus speed which is needed for 
   programming. \n
   If a early HCS12 device doesn't support SYNC then a software alternative is used which gives
   an accurate target bus speed. \n
   This method is not usable with secured device so yet another method is used to estimate the
   communication speed and  hence target bus speed.  This is less accurate and the user will be
   prompted to check the value supplied here, and modify if necessary, before proceeding.  \n
   In other circumstances this value is provided for information only.    

 - <b>RAM Buffer </b>\n
   The programmer user a buffer in the target chip RAM during programming.  
   This information is normally filled in automatically for a known device.        
   - Begin Address, End Address \n
     This specifies the \b Beginning and \b Ending inclusive addresses of the RAM buffer to use.
     This would normally be the largest range of contiguous RAM available in the target.

 - <b>Clock type and Parameters (RS08, HCS08 & CFV1 devices only)</b>\n
   The microcontrollers use a range of different clocks.  It is not necessary to know
   the clock type to program the Flash but this information is necessary to do 
   clock trimming.\n
   Note that it is possible to trim an already programmed chip providing the \e trim \e locations
   have not been previously programmed (i.e. contain 0xFF). \n
   This information is normally filled in automatically for a known device.        
   - Clock type \n
     The clock type used by the target chip.
   - Clock Module Address \n
     The address of the 1st register of the clock module.
   - Trim Frequency \n
     If the check box is selected then the target chip's clock will be trimmed to
     the given frequency and the trim parameters programmed to non-volatile memory.
     The FTRIM value will be <b> combined</b> with the flash image value if not 0xFF.
   - NVICSTRM\n
     The address of the non-volatile flash locations to program the clock trim parameters
     to.  Freescale has nominated particular locations to be used.  It is (usually) the responsibility 
     of the reset code programmed in the chip to copy these values to the clock registers upon
     reset.
     
 - <b>Security </b>\n
   The target chip may be secured when programming.  This means that the Flash contents cannot
   be read back nor can any modification be made except by doing a mass-erase of the entire Flash 
   memory.  This is controlled through the security locations in the flash memory.\n
   Note that programming security options will require erasing of the entire flash block containing the 
   security locations (with collateral erasure).\n
   Note that the entire security area is controlled by these options (usually ~16 bytes).
   - Image\n
      The security bits in the Flash memory are programmed with whatever value is contained within the flash 
      buffer being programmed. \n
      Note, if the loaded file does not specify a value for the security locations then these locations 
      will not be programmed.  This may result in the chip being \b secured since a unprogrammed value (0xFF)
      indicates a secured chip for some devices e.g. HCS08, CFV1+, Kinetis etc.
   - Secure\n
     The security bits will be programmed to enable security i.e. the security locations in the flash image buffer will be 
     modified before programming to the target.
   - Unsecure\n
     The security bits will be programmed to disable security i.e. the security locations in the buffer image buffer will be 
     modified before programming to the target.
   - Smart\n
     The security bits will be programmed to disable security where this does not conflict with the present buffer 
     contents i.e. only unoccupied security area locations will be programmed.  This is useful if the image contains
     values for part of the security area (e.g. Flash protection) but you still want to have control of the remaining 
     locations (e.g. securing the chip) through the programmer.   
     
 - <b>Device Operations </b>\n
   - Erase Options\n
      This option controls the erasing method used before programming:
      - <b>EraseMass</b> - A device specific mass erase & unsecure operation is done.  This action varies between devices 
      and may actually NOT leave the device fully erased.  For many devices it is necessary to program security bits
      to a non-erased state to unsecure the device.  This may conflict with programming security options.  However, 
      this option must sometimes be used when a device is originally secured.  
      - <b>EraseAll</b> - All flash arrays are individually bulk erased.
      - <b>EraseSelective</b> - Any flash blocks used in the flash image are erased.  Unprogrammed blocks are not erased.
      - <b>EraseNone</b> -  No erasing is done. Any overlap between the image being programmed and the present contents
      of the Flash will be reported although this may only be detected part-way through the programming.\n 
      The last two options may allow the incremental programming of a device that has been programmed previously with
      obvious limitations.  
   - Trim Value: (RS08,HCS08 & CFV1 only)\n
      This reports the trim value calculated when programming the target device.\n
      These values may be useful if you are using a debugger with the particular chip being programmed 
      and need fixed trim values for the clock initialisation code.\n  
      The value is given as two parts:
      - An 8-bit hex value for the ICSTRM/ICGTRM/MCGTRM register
      - A  1-bit FTRIM value for the lsb of the ICSSC/MCGSC register.
   - Program Flash\n
      The Flash of the target device will be programmed.  This may include non-volatile Clock Trim locations
      and security bits according to selected options.\n
      The flash memory is verified after programming (even if it is to be secured).
   - Verify Flash\n
      The contents of the target flash will be verified against the file image loaded.  Note that if clock trimming
      is selected then the non-volatile clock trim locations are not verified as they vary from chip-to-chip.\n
      Only \b Unsecured chips may be verified.
   - Load and Go\n
      As for <b>Program Flash</b> but the target is reset into normal (user) mode after programming.  This will result
      in the target executing the just programmed code.
   </td>
   <td>
   \image html "TargetTab(CFV1).png" "RS08, HCS08, CFV1, DSC, ARM Dialogue."
   \image html "TargetTab(HCS12).png" "HCS12 Dialogue."
   </td>
   </tr>
   </table>
         
<hr>
<b>Tab 3 - Advanced</b>\n\n
   <table border="0">
   <tr>
   <td>
   <b>BDM Parameters</b>
   - Power Off duration\n
      The length of time to turn off the power when having difficulty connecting to the target.
   - Power On Recovery interval\n
      The length of time to wait after powering on the target before attempting any operation.
   - Reset duration\n
      The length of time to apply the reset signal during a hardware reset.
   - Reset Release interval\n
      The length of time between releasing reset and releasing associated signals e.g. BKPT & BGND.
   - Power Off Duration\n
      The length of time to wait after resetting the target before attempting any operation.
   </td>
   <td>
   \image html "AdvancedTab.png"
   </td>
   </tr>
   </table>

\section sectionMaintenance Limitations & Maintenance
   - The devices supported are limited to those that I've had a chance to investigate.  The configuration for particular
     devices are contained in the various \b xxxx_devices.xml files.  This may be modified by hand to include other devices if
     they are similar to those already supported i.e. have a supported clock type and the usual type of Flash memory.\n
   - EEPROM (HCS12) and dual-flash (CFV1) are supported but not extensively tested.
   - The programmer \b requires the use of USBDM Ver 4.9 or later BDMs with <b>matching firmware</b>.  It should be possible to
     adapt the software to the OSBDM API relatively easily.
   - Note that Coldfire+ & Kinetis devices are limited to basic flash programming. 
       
\section sectionHistory Revision History
   -  V4.9.5 (June 2012) -
      - Added Support for ELF file format (only tested with Kinetis) 
      - DSC programmer extended
         - Programming firmware updated.
         - MC56F83xx family extended but untested and limited device entries have been created.  It may be possible to
           add other devices.
      - Bug fixes
         - Added/corrected entries for several HCS12 devices
         - Improved DSC communication routines to work with a wider range of devices.
   -  V4.9.4 (April 2012) -
      - Added Load and Go.
      - Added check for disk file change and Auto Reload option.
      - Added Smart security option.
      - Deleted Prompt to cycle power option - This was being ignored in most cases anyway :)
      - Added Advanced option page etc.
      - Added several command line options corresponding to above.
   -  V4.9.3 (March 2012) -
      - Added -execute option
   -  V4.9 (February 2012) -
      - Extensive changes to HCS12 programmer
      - Added programming algorithms for several HCS12 devices (HY,HA,XE,XS,P).
   -  V4.8 (December 2011) -
      - General update of how the programming algorithms are controlled.  \n
        They are much more configurable by the external XML and TCL files.  This allows for some customisation of the
        memory map on HCS12 devices or custom startup operations.  
      - Added Coldfire+ devices & algorithms.
      - Erase options extended (on some targets).
      - Re-testing of all devices (see list below) where complete memory images including paging were used.
      - Bug fixes on HCS08 programming.  Unsure were these were introduced but (hopefully) now squashed.
      - Paging of Flash and EEPROM has been updated for HCS12 and HCS08 devices.  
      - The memory image descriptions are now more detailed and are more carefully enforced when programming.  Attempting
        to program non-existent memory is now reported before programming is attempted.  This should result in more 
        meaningful error messages.
      - msi install updated for Codewarrior 10.2
      - Testing with Codewarrior 10.2 Beta
   -  V4.7 (October 2011) -
      - BDM interface speed control implemented for CFVx devices
      - Windows Installer
      - Updates for Eclipse Kinetis device name changes
      - Bug fixes
         - Devices incorrectly identified as secured
         - Corrections to CFVx connection sequences
   -  V4.6 (June 2011) -
      - Support for Kinetis and limited ARM Targets
      - Improvements to USB error checking (JMxx/JS16 only)
   -  V4.5 (February 2011) 
      - Added devices
      - Added EEPROM support
      - Added Dual-flash support
      - Restored command line operation
      - Flash image now dynamically allocated so no (realistic) size limitation  
   -  V4.0 (September 2010) 
      - This version has various restrictions.  In particular command line operation is not available.
      - Added HCS12 version - limited target support.
   -  V3.2 (May 2010) 
   -  V2.0 (Feb 2010) 
      - Added support for paged memory (-AC128, -DZ128 etc)
      - Changed trim algorithm to use linear curve fitting.
      - FTRIM now combined with existing image value if present.
      - Changed console handling on command line version.
      - Fixed "Image" security option modifying flash image. This could prevent programming the clock trim value by itself.
      - The calculated trim value is now available on the dialogue for use when debugging with a particular chip.
   -  V1.0 (Dec 2009) 
      - Initial release.

 \section sectionTesting Testing
   The drivers and programmers have been tested with the following devices (basic programming, debugging and clock trim where applicable):\n
   
   - RS08KA1, -KA2, -KA8, -LA8, -LE4 
   - MC9S08AC60 -AC128, -DN16, -DZ128, -EL16, -FL16, -GB60A, -GT16A, -GT32, -JM16, -JM60, -JS16, -LG32, -LL64, \n
                -LM26, -QA4, -QB8, -QD4, -QE8, -QE16, -QE128, -QG8, -RD16, -SE8, -SF4, -SG8, -SH8, -SV16, \n
   - MC13213 \n
   - MC9S12A64, -C32, -C128, -DP256B, -DG128, -DT256, -HY64, -NE64, -P128, -XEP100, -XD256, -XDT512, -XS128,\n
                -UF32(check hardware errata on this chip!) 
   - MCF51AC256, -CN128, -EM256, -JM128, -QE96,  \n
   - MCF52233, MCF52210 and some other ones that I can't recall at the moment.  These are all V2 chips - I don't have any V3/4 to test with.
   - MC56F8006, MC56F8013, MC56F8014, MC56F8023, MC56F8245, MC56F8323, 
   - Kinetis K40X256, K60X256
   - Complete systems - Axiom MC56F8006 Demo board, TWR-K40, TWR-K60, TWR-CFV1 and TWR-RS08/HCS08. \n
   
   Please advise of any problems. 

 \section sectionQueries Queries
   Any queries please post on the Freescale 
   @htmlonly <a href="http://forums.freescale.com/freescale/board?board.id=OSBDM08">OSBDM Discussion Board</a>. @endhtmlonly \n

 \section sectionReferences References
   -  Doxygen Documentation tool - http://www.stack.nl/~dimitri/doxygen/index.html
   -  OSBDM - http://forums.freescale.com/freescale/board?board.id=OSBDM08
   -  Tool Command Language (TCL) http://www.tcl.tk/
   -  Ultimate Packer for eXecutables (UPX) has been used to pack DLLs and EXEs - http://upx.sourceforge.net/ 
   -  WxWidgets Cross Platform Library has been used for the GUI - http://www.wxwidgets.org/
   -  Xerces XML parser http://xerces.apache.org/xerces-c/

 \section licenseSection License
   \verbatim

   USBDM Flash programmer
   Copyright (C) 2009-11  Peter O'Donoghue

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
   \endverbatim

*/
